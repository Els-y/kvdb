// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EntryType int32

const (
	EntryType_EntryNormal EntryType = 0
)

var EntryType_name = map[int32]string{
	0: "EntryNormal",
}

var EntryType_value = map[string]int32{
	"EntryNormal": 0,
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}

func (EntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

type MessageType int32

const (
	MessageType_MsgHup           MessageType = 0
	MessageType_MsgBeat          MessageType = 1
	MessageType_MsgProp          MessageType = 2
	MessageType_MsgApp           MessageType = 3
	MessageType_MsgAppResp       MessageType = 4
	MessageType_MsgVote          MessageType = 5
	MessageType_MsgVoteResp      MessageType = 6
	MessageType_MsgHeartbeat     MessageType = 7
	MessageType_MsgHeartbeatResp MessageType = 8
)

var MessageType_name = map[int32]string{
	0: "MsgHup",
	1: "MsgBeat",
	2: "MsgProp",
	3: "MsgApp",
	4: "MsgAppResp",
	5: "MsgVote",
	6: "MsgVoteResp",
	7: "MsgHeartbeat",
	8: "MsgHeartbeatResp",
}

var MessageType_value = map[string]int32{
	"MsgHup":           0,
	"MsgBeat":          1,
	"MsgProp":          2,
	"MsgApp":           3,
	"MsgAppResp":       4,
	"MsgVote":          5,
	"MsgVoteResp":      6,
	"MsgHeartbeat":     7,
	"MsgHeartbeatResp": 8,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

type Entry struct {
	Type                 EntryType `protobuf:"varint,1,opt,name=Type,proto3,enum=rpc.EntryType" json:"Type,omitempty"`
	Term                 uint64    `protobuf:"varint,2,opt,name=Term,proto3" json:"Term,omitempty"`
	Index                uint64    `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	Data                 []byte    `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetType() EntryType {
	if m != nil {
		return m.Type
	}
	return EntryType_EntryNormal
}

func (m *Entry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *Entry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Entry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message struct {
	Type                 MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=rpc.MessageType" json:"Type,omitempty"`
	To                   uint64      `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`
	From                 uint64      `protobuf:"varint,3,opt,name=From,proto3" json:"From,omitempty"`
	Term                 uint64      `protobuf:"varint,4,opt,name=Term,proto3" json:"Term,omitempty"`
	LogTerm              uint64      `protobuf:"varint,5,opt,name=LogTerm,proto3" json:"LogTerm,omitempty"`
	Index                uint64      `protobuf:"varint,6,opt,name=Index,proto3" json:"Index,omitempty"`
	Entries              []*Entry    `protobuf:"bytes,7,rep,name=Entries,proto3" json:"Entries,omitempty"`
	Commit               uint64      `protobuf:"varint,8,opt,name=Commit,proto3" json:"Commit,omitempty"`
	Reject               bool        `protobuf:"varint,10,opt,name=Reject,proto3" json:"Reject,omitempty"`
	RejectHint           uint64      `protobuf:"varint,11,opt,name=RejectHint,proto3" json:"RejectHint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_MsgHup
}

func (m *Message) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Message) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Message) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *Message) GetLogTerm() uint64 {
	if m != nil {
		return m.LogTerm
	}
	return 0
}

func (m *Message) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Message) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Message) GetCommit() uint64 {
	if m != nil {
		return m.Commit
	}
	return 0
}

func (m *Message) GetReject() bool {
	if m != nil {
		return m.Reject
	}
	return false
}

func (m *Message) GetRejectHint() uint64 {
	if m != nil {
		return m.RejectHint
	}
	return 0
}

type Response struct {
	Err                  []byte   `protobuf:"bytes,1,opt,name=Err,proto3" json:"Err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetErr() []byte {
	if m != nil {
		return m.Err
	}
	return nil
}

type HardState struct {
	Term                 uint64   `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Vote                 uint64   `protobuf:"varint,2,opt,name=Vote,proto3" json:"Vote,omitempty"`
	Commit               uint64   `protobuf:"varint,3,opt,name=Commit,proto3" json:"Commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HardState) Reset()         { *m = HardState{} }
func (m *HardState) String() string { return proto.CompactTextString(m) }
func (*HardState) ProtoMessage()    {}
func (*HardState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

func (m *HardState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardState.Unmarshal(m, b)
}
func (m *HardState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardState.Marshal(b, m, deterministic)
}
func (m *HardState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardState.Merge(m, src)
}
func (m *HardState) XXX_Size() int {
	return xxx_messageInfo_HardState.Size(m)
}
func (m *HardState) XXX_DiscardUnknown() {
	xxx_messageInfo_HardState.DiscardUnknown(m)
}

var xxx_messageInfo_HardState proto.InternalMessageInfo

func (m *HardState) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *HardState) GetVote() uint64 {
	if m != nil {
		return m.Vote
	}
	return 0
}

func (m *HardState) GetCommit() uint64 {
	if m != nil {
		return m.Commit
	}
	return 0
}

func init() {
	proto.RegisterEnum("rpc.EntryType", EntryType_name, EntryType_value)
	proto.RegisterEnum("rpc.MessageType", MessageType_name, MessageType_value)
	proto.RegisterType((*Entry)(nil), "rpc.Entry")
	proto.RegisterType((*Message)(nil), "rpc.Message")
	proto.RegisterType((*Response)(nil), "rpc.Response")
	proto.RegisterType((*HardState)(nil), "rpc.HardState")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0x5d, 0x8b, 0x13, 0x31,
	0x14, 0xed, 0x7c, 0x74, 0xa6, 0x7b, 0xa7, 0xd6, 0x70, 0x59, 0x24, 0xc8, 0x22, 0xc3, 0xb0, 0xc2,
	0xb0, 0x60, 0x1f, 0xea, 0x2f, 0xf0, 0x63, 0xa5, 0xa2, 0x15, 0xc9, 0x16, 0xdf, 0xb3, 0x6d, 0xb6,
	0x54, 0x9c, 0x49, 0xc8, 0x44, 0x70, 0x7f, 0x84, 0x8f, 0xfe, 0x5f, 0xc9, 0x6d, 0xda, 0x66, 0xdf,
	0xce, 0x39, 0xf7, 0x26, 0xe7, 0xdc, 0x9b, 0x00, 0x58, 0xf9, 0xe0, 0xe6, 0xc6, 0x6a, 0xa7, 0x31,
	0xb3, 0x66, 0xd3, 0xec, 0x61, 0x7c, 0xdb, 0x3b, 0xfb, 0x88, 0x0d, 0xe4, 0xeb, 0x47, 0xa3, 0x78,
	0x52, 0x27, 0xed, 0x6c, 0x31, 0x9b, 0x5b, 0xb3, 0x99, 0x53, 0xc5, 0xab, 0x82, 0x6a, 0x88, 0x90,
	0xaf, 0x95, 0xed, 0x78, 0x5a, 0x27, 0x6d, 0x2e, 0x08, 0xe3, 0x25, 0x8c, 0x3f, 0xf7, 0x5b, 0xf5,
	0x87, 0x67, 0x24, 0x1e, 0x88, 0xef, 0xfc, 0x28, 0x9d, 0xe4, 0x79, 0x9d, 0xb4, 0x53, 0x41, 0xb8,
	0xf9, 0x9b, 0x42, 0xb9, 0x52, 0xc3, 0x20, 0x77, 0x0a, 0xaf, 0x9f, 0xb8, 0x31, 0x72, 0x0b, 0xb5,
	0xc8, 0x6f, 0x06, 0xe9, 0x5a, 0x07, 0xb7, 0x74, 0xad, 0xfd, 0xad, 0x9f, 0xac, 0xee, 0x82, 0x15,
	0xe1, 0x53, 0xa6, 0x3c, 0xca, 0xc4, 0xa1, 0xfc, 0xaa, 0x77, 0x24, 0x8f, 0x49, 0x3e, 0xd2, 0x73,
	0xda, 0x22, 0x4e, 0x7b, 0x0d, 0xa5, 0x1f, 0x75, 0xaf, 0x06, 0x5e, 0xd6, 0x59, 0x5b, 0x2d, 0xe0,
	0x3c, 0xbe, 0x38, 0x96, 0xf0, 0x05, 0x14, 0x1f, 0x74, 0xd7, 0xed, 0x1d, 0x9f, 0xd0, 0xe1, 0xc0,
	0xbc, 0x2e, 0xd4, 0x4f, 0xb5, 0x71, 0x1c, 0xea, 0xa4, 0x9d, 0x88, 0xc0, 0xf0, 0x15, 0xc0, 0x01,
	0x2d, 0xf7, 0xbd, 0xe3, 0x15, 0x9d, 0x89, 0x94, 0xe6, 0x0a, 0x26, 0x42, 0x0d, 0x46, 0xf7, 0x83,
	0x42, 0x06, 0xd9, 0xad, 0xb5, 0xb4, 0x8e, 0xa9, 0xf0, 0xb0, 0xf9, 0x02, 0x17, 0x4b, 0x69, 0xb7,
	0x77, 0x4e, 0xba, 0xf3, 0xe2, 0x93, 0x68, 0x48, 0x84, 0xfc, 0x87, 0x76, 0xea, 0xf8, 0x18, 0x1e,
	0x47, 0x11, 0xb3, 0x38, 0xe2, 0xcd, 0x15, 0x5c, 0x9c, 0xde, 0x12, 0x9f, 0x43, 0x45, 0xe4, 0x9b,
	0xb6, 0x9d, 0xfc, 0xc5, 0x46, 0x37, 0xff, 0x12, 0xa8, 0xa2, 0xe5, 0x23, 0x40, 0xb1, 0x1a, 0x76,
	0xcb, 0xdf, 0x86, 0x8d, 0xb0, 0x82, 0x72, 0x35, 0xec, 0xde, 0x2b, 0xe9, 0x58, 0x12, 0xc8, 0x77,
	0xab, 0x0d, 0x4b, 0x43, 0xd7, 0x3b, 0x63, 0x58, 0x86, 0x33, 0x80, 0x03, 0xf6, 0x03, 0xb1, 0x3c,
	0x34, 0xfa, 0x48, 0x6c, 0xec, 0xfd, 0x02, 0xa1, 0x6a, 0x81, 0x0c, 0xa6, 0xfe, 0x7e, 0x25, 0xad,
	0xbb, 0xf7, 0x17, 0x97, 0x78, 0x09, 0x2c, 0x56, 0xa8, 0x6f, 0xb2, 0x78, 0x03, 0xb9, 0x90, 0x0f,
	0x0e, 0x5f, 0x43, 0x7e, 0xa7, 0xfa, 0x2d, 0x4e, 0xe3, 0x6f, 0xf2, 0xf2, 0x19, 0xb1, 0xe3, 0x06,
	0x9b, 0xd1, 0x7d, 0x41, 0xdf, 0xfa, 0xed, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0xf6, 0x35,
	0x98, 0xe4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.Raft/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	Send(context.Context, *Message) (*Response, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) Send(ctx context.Context, req *Message) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Raft/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Raft_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
